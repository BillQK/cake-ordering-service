org: kigo4710
app: cake-ordering-system
service: cake-ordering-system

provider:
  name: aws
  runtime: nodejs18.x
  logs:
    restApi: true # Enable API Gateway logs
  lambdaHashingVersion: 20201221

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource:
        - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ordersTable
    - Effect: Allow
      Action:
        - kinesis:PutRecord
      Resource:
        - !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/order-events
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: "*"
      Condition:
        StringEquals:
          ses:FromAddress:
            - billngo47@gmail.com

    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:deliveryServiceQueue
        - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:customerServiceQueue

functions:
  createOrder:
    handler: handler.createOrder
    events:
      - http:
          path: /order
          method: post
    environment:
      orderTableName: ordersTable
      orderStreamName: order-events
  orderFulfillment:
    handler: handler.orderFulfillment
    events:
      - http:
          path: /order/fulfill
          method: post
    environment:
      orderTableName: ordersTable
      orderStreamName: order-events
  notifyExternalParties:
    handler: handler.notifyExternalParties
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt: [orderEventsStream, Arn]
    environment:
      region: ${aws:region}
      cakeProducerEmail: billdt2002@gmail.com
      orderingSystemEmail: billngo47@gmail.com
      deliveryCompanyQueue:
        Ref: deliveryServiceQueue
      orderTableName: ordersTable
  notifyDeliveryCompany:
    handler: handler.notifyDeliveryCompany
    events:
      - sqs:
          arn:
            Fn::GetAtt: [deliveryServiceQueue, Arn]
          batchSize: 1
  orderDelivered:
    handler: handler.orderDelivered
    events:
      - http:
          path: /order/delivered
          method: post
    environment:
      region: ${aws:region}
      orderTableName: ordersTable
      customerServiceQueue:
        Ref: customerServiceQueue
  notifyCustomerService:
    handler: handler.notifyCustomerService
    events:
      - sqs:
          arn:
            Fn::GetAtt: [customerServiceQueue, Arn]
          batchSize: 1

resources:
  Resources:
    orderEventsStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: order-events
        ShardCount: 1
    orderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ordersTable
        AttributeDefinitions:
          - AttributeName: "orderId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "orderId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
    deliveryServiceQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: deliveryServiceQueue
    customerServiceQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: customerServiceQueue
